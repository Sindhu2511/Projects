import numpy as np
import random # To generate random points
import matplotlib.pyplot as plt #To have a graph plotted 
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

np.random.seed(0)
n_points = 30
x_point = np.linspace(0, np.pi, n_points) #np.linspace plots points in regular intervals from 1 to 30
y_point = np.sin(x_point) + np.random.normal(0, 0.1, n_points)

x_point = x_point.reshape(-1, 1)
polynomial = PolynomialFeatures(degree=5)
x_poly_point = polynomial.fit_transform(x_point)
graph = LinearRegression()
graph.fit(x_poly_point, y_point)

x_test = np.linspace(-np.pi, 2*np.pi, 100)
y_test_true = np.sin(x_test)

x_test = x_test.reshape(-1, 1)
x_poly_test = polynomial.transform(x_test)
y_predict = graph.predict(x_poly_test)


plt.figure(figsize=(10, 6))
plt.scatter(x_point, y_point, color='blue', label='Training Data')
plt.plot(x_test, y_predict, color='green', label='Regression curve')
plt.title('Regression on Sine curve using polynomial regression')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
